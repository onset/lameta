{
  common: [
    {
      key: "language",
      rocrate: {
        key: "language",
        template: {
          "@id": "#language_[code]",
          "@type": "Language",
          code: "[code]",
          name: "[languageName]"
        }
      }
    },
    {
      key: "person",
      rocrate: {
        key: "participant",
        template: {
          "@id": "[v]",
          "@type": "Person",
          name: "[v]"
        }
      }
    },
    {
      key: "role",
      rocrate: {
        key: "role",
        template: {
          "@id": "#role_[v]",
          "@type": "Role",
          name: "[v]"
        }
      }
    }
  ],
  project: [
    {
      key: "archiveConfigurationName",
      form: "ArchiveConfiguration",
      default: "default",
      xmlTag: "ArchiveConfigurationName",
      englishLabel: "Archive Configuration used by this project",
      vocabulary: "ArchiveConfigurationName"
    },
    {
      key: "customAccessChoices",
      form: "ArchiveConfiguration",
      "//": "Older Windows SM actually didn't store this in the sprj at all",
      xmlTag: "CustomAccessProtocol",
      englishLabel: "Custom Session Access Choices"
    },

    /* ------ Funding Project --------- */
    {
      // confusing because, as ELAR's request, the lameta project title
      // was labled as "Project ID" in lameta 2.x, but it also had a
      // "grant id" field which is what actually went out to IMDI Project/Id!
      // For now we're going to just stick with the "grantId" key
      // and change the UI only, so what is "Grant ID" in lameta 2.x becomes
      // "Project ID" under "Funding Project" in lameta 3.x
      key: "grantId",
      //lameta2Tag: "grantId",
      xmlTag: "GrantId",
      englishLabel: "Project ID",
      form: "fundingProject",
      tabIndex: 0,
      imdiComment: "Corpus/MDGroup/Project/Id"
    },
    // {
    //   key: "grantId",
    //   xmlTag: "grantId",
    //   xmlComment: "deprecated in 3.x, copied to fundingProjectId",
    //   deprecated: true,
    //   outputForOlderVersionsFrom: "fundingProjectId"
    // },

    {
      key: "fundingProjectTitle",
      englishLabel: "Funding Project Title",
      xmlTag: "FundingProjectTitle",
      form: "fundingProject",
      imdiComment: "Corpus/MDGroup/Project/Title"
    },
    {
      key: "fundingProjectFunder",
      lameta2Tag: "NONE",
      englishLabel: "Funder",
      xmlTag: "FundingProjectFunder",
      form: "fundingProject",
      // ELAR would like to put this under MDGroup/Project/Funder but that will need a new schema
      imdiComment: "Corpus/MDGroup/Keys/Key[@Name='Funding Body']"
    },
    {
      key: "fundingProjectAffiliation",
      lameta2Tag: "NONE",
      englishLabel: "Project Affiliation",
      xmlTag: "FundingProjectAffiliation",
      form: "fundingProject",
      imdiComment: "Corpus/MDGroup/Project/Contact/Organisation"
    },
    {
      key: "contactPerson",
      lameta2Tag: "NONE",
      englishLabel: "Project Lead",
      xmlTag: "ContactPerson",
      form: "fundingProject",
      imdiComment: "Corpus/MDGroup/Project/Contact/Name"
    },
    // {
    //   key: "contactPerson",
    //   englishLabel: "Contact Person",
    //   xmlTag: "ContactPerson",
    //   imdiComment: "Project/Contact/Name",
    //   form: "fundingProject",
    //   description: "Contact information about the person or institution responsible for the project.",
    //   tabIndex: 10
    // },
    /* ------ Collection --------- */

    {
      key: "title",
      xmlTag: "Title",
      englishLabel: "Title", // changed to Project ID at ELAR request Dec 2019
      form: "collection",
      tabIndex: 0,
      imdiComment: "Corpus/Title"
    },
    {
      key: "collectionKey",
      englishLabel: "Collection Key",
      xmlTag: "CollectionKey",
      form: "collection",
      tabIndex: 1,
      visibility: "never",
      imdiComment: "Corpus/MDGroup/Keys/Key[@Name='CorpusId']"
    },
    {
      key: "collectionDescription",
      lameta2Tag: "projectDescription",
      xmlTag: "ProjectDescription",
      englishLabel: "Description",
      multipleLines: true,
      form: "collection",
      visibility: "always",
      imdiComment: "Corpus/Description[@Name='short_description']",
      tabIndex: 2
    },
    {
      key: "collectionSteward",
      xmlTag: "CollectionSteward",
      englishLabel: "Steward",
      visibility: "never",
      form: "collection",
      cssClass: "field__newSection",
      imdiComment: "Corpus/MDGroup/Actors/Actor[Role='Collection Steward']",
      tabIndex: 4
    },
    {
      key: "collectionDeputySteward",
      xmlTag: "CollectionDeputySteward",
      englishLabel: "Deputy Stewards",
      separatorWithCommaInstructions: "For multiple people, separate with commas",
      visibility: "never",
      form: "collection",
      imdiComment: "Corpus/MDGroup/Actors/Actor[Role='Deputy Collection Steward'] - can be repeated",
      tabIndex: 5
    },
    {
      key: "depositor",
      xmlTag: "Depositor",
      englishLabel: "Depositors",
      separatorWithCommaInstructions: "For multiple people, separate with commas",
      visibility: "always",
      form: "collection",
      imdiComment: "Corpus/MDGroup/Actors/Actor[Role='Depositor'] - can be repeated",
      tabIndex: 6
    },
    /* Removed at ELAR request Dec 2019, because there is also "contact" and putting your name in 3 times
      is a drag.
    {
      "key": "rightsHolder",
      "xmlTag": "RightsHolder"
    },
    */

    /* Removed My 2020 https://trello.com/c/yxCLMvme/98-explain-dateavailable
    {
      "key": "dateAvailable",
      "xmlTag": "DateAvailable",
      "type": "Date",
      "tabIndex": 11
    }*/

    // This section added in V3 to support fields ELAR uses. See ELAR/fields.json5
    /*
    {
      key: "collectionName",
      englishLabel: "Collection Name",
      visibility: "never",
      form: "collection",
      tabIndex: 1
    },
    */

    // ----------- Location
    // ------------This could eventually be its own kind of object. Currently is is just part of the Collection
    {
      key: "location",
      form: "collectionLocation",
      englishLabel: "Location/Address",
      xmlTag: "Location",
      multipleLines: true,
      tabIndex: 18
    },
    {
      key: "region",

      form: "collectionLocation",
      englishLabel: "Region",
      xmlTag: "Region",
      tabIndex: 19
    },
    {
      key: "country",
      form: "collectionLocation",
      englishLabel: "Country",
      xmlTag: "Country",
      imdiRange: "http://www.mpi.nl/IMDI/Schema/Countries.xml",
      imdiIsClosedVocabulary: false,
      tabIndex: 20
      //choices are filled in by KnownFieldDefinitions.ts
    },
    {
      key: "continent",
      form: "collectionLocation",
      englishLabel: "Continent",
      xmlTag: "Continent",
      imdiRange: "http://www.mpi.nl/IMDI/Schema/Continents.xml",
      imdiIsClosedVocabulary: true,
      choices: [
        "unspecified",
        "Africa",
        "Asia",
        "Australia",
        "Europe",
        "Americas",
        "North-America",
        "Middle-America",
        "Oceania",
        "South-America"
      ],
      tabIndex: 21
    },

    {
      key: "collectionSubjectLanguages",
      englishLabel: "Subject Languages",
      xmlTag: "CollectionSubjectLanguages",
      form: "languages",
      type: "languageChoices",
      controlProps: {
        canCreateNew: true
      },
      tabIndex: 1
    },
    {
      key: "collectionWorkingLanguages",
      xmlTag: "CollectionWorkingLanguages",
      englishLabel: "Working Languages",
      form: "languages",
      type: "languageChoices",
      tabIndex: 2
    }
  ],
  session: [
    {
      key: "id",
      englishLabel: "ID",
      /* SayMore Windows doesn't persist this in xml, it just uses the file name. Adding it would mess up files opened by that version.
         However, we can't santize names to archive expectations while preserving the actual unicode name unless
         we do persist it 
      "persist": false, */
      tabIndex: 0
    },
    {
      key: "title",
      xmlTag: "Title",
      englishLabel: "Title",
      tabIndex: 4
    },
    {
      key: "description",
      xmlTag: "Description",
      englishLabel: "Description",
      xmlTag: "synopsis",
      multipleLines: true,
      tabIndex: 5
    },
    {
      key: "languages",
      xmlTag: "languages",
      type: "languageChoices",
      englishLabel: "Subject Languages",
      rocrate: {
        key: "subjectLanguages",
        handler: "languages",
        array: true,
        template: { "@id": "#language_[v]" }
      },
      tabIndex: 12
    },
    {
      key: "workingLanguages",
      xmlTag: "WorkingLanguages",
      type: "languageChoices",
      englishLabel: "Working Languages",
      rocrate: {
        key: "contentLanguages",
        handler: "languages",
        array: true,
        template: { "@id": "#language_[v]" }
      },
      tabIndex: 14
    },
    {
      key: "participants",
      xmlTag: "Participants",
      englishLabel: "People",
      rocrate: {
        key: "contributors",
        handler: "person",
        array: true
      },
      tabIndex: 3
    },
    {
      key: "genre",
      englishLabel: "Genre",
      xmlTag: "Genre",
      imdiRange: "http://www.mpi.nl/IMDI/Schema/Content-Genre.xml",
      vocabularyFile: "genres.json5",
      tabIndex: 6
    },
    {
      key: "subgenre",
      xmlTag: "Sub-Genre",
      englishLabel: "Subgenre",
      imdiRange: "http://www.mpi.nl/IMDI/Schema/Content-SubGenre.xml",
      // moved from additional/more Dec 2019 at ELAR request
      // Ro-Crate note: this is not a controlled vocabulary; we will omit it from ro-crate for now
      tabIndex: 7
    },
    /* removed Dec 2019. If found these are appended to the description by Session.ts migrateDeprecatedFields()
    {
      "key": "situation",
      "multipleLines": true,
      "omitFromImdi": true,
      "deprecated":"migrated to description by lameta"
    },
    {
      "key": "setting",
      "multipleLines": true,
      "omitFromImdi": true,
      "deprecated":"migrated to description by lameta"
    },*/

    {
      key: "location",
      xmlTag: "Location",
      englishLabel: "Neighborhood/Town/Village",
      description: "A location that is relevant within the group you are studying",
      tabIndex: 12,
      rocrate: {
        key: "contentLocation",
        template: { "@id": "#[v]", "@type": "Place", name: "[v]" }
      }
    },
    {
      key: "access",
      xmlTag: "Access",
      englishLabel: "Access",
      tabIndex: 8
    },
    {
      key: "accessDescription", // this was the inherited key... but really it's an explanation
      xmlTag: "AccessExplanation",
      englishLabel: "Access Explanation",
      description: "If the access is not open/free, use this to explain why.",
      tabIndex: 9
    },

    {
      key: "status",
      xmlTag: "Status",
      englishLabel: "Status",
      choices: ["Incoming", "In_Progress", "Finished", "Skipped"],
      default: "Incoming",
      "//": "don't show on main form",
      form: "status"
    },
    {
      key: "date",
      xmlTag: "Date",
      englishLabel: "Date",
      type: "Date",
      tabIndex: 1
    },
    {
      key: "involvement",
      englishLabel: "Researcher Involvement",
      xmlTag: "Involvement",
      additional: true,
      imdiIsClosedVocabulary: true,
      imdiRange: "http://www.mpi.nl/IMDI/Schema/Content-Involvement.xml",
      choices: [
        "unspecified",
        "//leaving out until Windows SayMore can handle it: unknown",

        "elicited",
        "non-elicited",
        "no-observer"
      ],
      default: "unspecified"
    },

    {
      key: "locationRegion",
      englishLabel: "Region",
      xmlTag: "Location_Region",
      additional: true
    },
    {
      key: "locationCountry",
      englishLabel: "Country",
      xmlTag: "Location_Country",
      imdiRange: "http://www.mpi.nl/IMDI/Schema/Countries.xml",
      imdiIsClosedVocabulary: false,
      additional: true
      //choices are filled in by KnownFieldDefinitions.ts
    },
    {
      key: "locationContinent",
      englishLabel: "Continent",
      xmlTag: "Location_Continent",
      imdiRange: "http://www.mpi.nl/IMDI/Schema/Continents.xml",
      imdiIsClosedVocabulary: true,
      choices: [
        "unspecified",
        "Africa",
        "Americas",
        "Asia",
        "Australia",
        "Europe",
        "North-America",
        "Middle-America",
        "Oceania",
        "South-America"
      ],

      additional: true
    },
    // Removed Dec 2019 at ELAR request
    //{
    //   "key": "locationAddress",
    //   "xmlTag": "Location_Address",
    //   "additional": true
    // },
    {
      key: "planningType",
      englishLabel: "Planning Type",
      xmlTag: "Planning_Type",
      additional: true,
      imdiIsClosedVocabulary: true,
      imdiRange: "http://www.mpi.nl/IMDI/Schema/Content-PlanningType.xml",
      choices: [
        "unspecified",
        "//leaving out until Windows SayMore can handle it: unknown",

        "spontaneous",
        "semi-spontaneous",
        "planned"
      ],
      default: "unspecified"
    },
    {
      key: "socialContext",
      englishLabel: "Social Context",
      xmlTag: "Social_Context",
      additional: true,
      imdiIsClosedVocabulary: true,
      choices: [
        "unspecified",
        "//leaving out until Windows SayMore can handle it: unknown",

        "family",
        "private",
        "public",
        "controlled environment"
      ],
      imdiRange: "http://www.mpi.nl/IMDI/Schema/Content-SocialContext.xml",
      default: "unspecified"
    },
    {
      // added at ELAR request Dec 2019
      key: "keyword",
      xmlTag: "Keywords",
      englishLabel: "Keywords",
      additional: false,
      separatorWithCommaInstructions: "Separate with commas. Note that individual keywords cannot contain a comma.",
      tabIndex: 10,
      rocrate: {
        key: "keywords"
      }
    },
    {
      // added at ELAR request Dec 2019
      key: "topic",
      xmlTag: "Topic",
      englishLabel: "Topic",
      additional: false,
      separatorWithCommaInstructions: "Separate with commas. Note that individual topics cannot contain a comma.",
      tabIndex: 11
    },
    {
      key: "customFields",
      xmlTag: "CustomFields",
      englishLabel: "Custom Fields",
      description: "A table of labels and values for a session.",
      tipOnUsingThisField: "Use commas if you want multiple values. To remove a custom field, clear out the value everywhere you have used it, then restart lameta."
    }
  ],
  person: [
    {
      key: "name",
      xmlTag: "FullName",
      englishLabel: "Full Name"
      /* SayMore Windows doesn't persist this in xml, it just uses the file name. Adding it would mess up files opened by that version.
         However, we can't santize names to archive expectations while preserving the actual unicode name unless
         we do persist it */
      //"persist": false
    },
    {
      key: "nickname",
      xmlTag: "NickName",
      englishLabel: "Nickname"
    },
    {
      key: "code",
      xmlTag: "Code",
      englishLabel: "Code"
    },
    {
      // new for lameta (starting with 0.9)... will become a complex object with code, if a primary, if parents speak it, etc.
      key: "languages",
      xmlTag: "Languages",
      englishLabel: "Languages",
      type: "personLanguageList"
    },
    {
      key: "primaryLanguage",
      // Leave this out because it is deprecated. englishLabel: "Primary Language",
      omitExport: "true",
      deprecated: "migrated to languages by lameta",
      importType: "languageCodeOrName"
    },
    {
      key: "primaryLanguageLearnedIn", // in original saymore, this field was labeled: "learned in"
      // we're retaining that key to allow migration, but
      // Leave this out because it is deprecated. englishLabel: "Details", // in lameta we extend this to be more general
      omitExport: "true",
      deprecated: "migrated to description by lameta"
    },
    {
      key: "otherLanguage0",
      omitExport: "true",
      // Leave this out because it is deprecated. deprecated: "migrated to languages by lameta",
      importType: "languageCodeOrName"
    },
    {
      key: "otherLanguage1",
      omitExport: "true",
      deprecated: "migrated to languages by lameta",
      importType: "languageCodeOrName"
    },
    {
      key: "otherLanguage2",
      omitExport: "true",
      deprecated: "migrated to languages by lameta",
      importType: "languageCodeOrName"
    },
    {
      key: "otherLanguage3",
      omitExport: "true",
      deprecated: "migrated to languages by lameta",
      importType: "languageCodeOrName"
    },
    {
      key: "otherLanguage4",
      omitExport: "true",
      deprecated: "migrated to languages by lameta",
      importType: "languageCodeOrName"
    },
    {
      key: "otherLanguage5",
      omitExport: "true",
      deprecated: "migrated to languages by lameta",
      importType: "languageCodeOrName"
    },
    {
      key: "otherLanguage6",
      omitExport: "true",
      deprecated: "migrated to languages by lameta",
      importType: "languageCodeOrName"
    },
    {
      key: "otherLanguage7",
      omitExport: "true",
      deprecated: "migrated to languages by lameta",
      importType: "languageCodeOrName"
    },
    {
      key: "otherLanguage8",
      omitExport: "true",
      deprecated: "migrated to languages by lameta",
      importType: "languageCodeOrName"
    },
    {
      key: "otherLanguage9",
      omitExport: "true",
      deprecated: "migrated to languages by lameta",
      importType: "languageCodeOrName"
    },
    {
      key: "fathersLanguage",
      englishLabel: "Father's Language",
      omitExport: "true",
      deprecated: "migrated to languages by lameta",
      importType: "languageCodeOrName"
    },
    {
      key: "mothersLanguage",
      englishLabel: "Mother's Language",
      omitExport: "true",
      deprecated: "migrated to languages by lameta",
      importType: "languageCodeOrName"
    },
    {
      key: "otherLanguages",
      englishLabel: "Other Languages",
      omitExport: "true",
      omitSave: "true",
      importType: "languageCodeOrName"
    },
    {
      key: "education",
      xmlTag: "Education",
      englishLabel: "Education"
    },
    {
      key: "birthYear",
      xmlTag: "BirthYear",
      englishLabel: "Birth Year",
      tipOnUsingThisField: "If you are estimating, talk about that in the Description. Enter '?' if you don't know."
    },
    {
      key: "gender",
      xmlTag: "Gender",
      englishLabel: "Gender",
      // Note, Actor-sex does not offer "other", so that will have to be mapped to either unspecified or NAP
      choices: ["Unknown", "Male", "Female", "Other"],
      imdiRange: "http://www.mpi.nl/IMDI/Schema/Actor-Sex.xml",
      imdiIsClosedVocabulary: true
    },
    {
      key: "howToContact",
      xmlTag: "HowToContact",
      englishLabel: "How to Contact",
      multipleLines: true,
      personallyIdentifiableInformation: true,
      omitFromImdi: true
    },
    {
      key: "ethnicGroup",
      xmlTag: "EthnicGroup",
      englishLabel: "Ethnic Group"
    },
    {
      key: "primaryOccupation",
      xmlTag: "PrimaryOccupation",
      englishLabel: "Primary Occupation",
      omitFromImdi: true
    },
    {
      key: "description",
      xmlTag: "Description",
      englishLabel: "Description",
      description: "Relevant details such as where they learned the language(s)"
    },
    {
      key: "customFields",
      xmlTag: "CustomFields",
      englishLabel: "Custom Fields",
      description: "A table of labels and values for a person.",
      tipOnUsingThisField: "Use commas if you want multiple values. To remove a custom field, clear out the value everywhere you have used it, then restart lameta."
    }
  ]
  // an idea, I don't know if it's worth it:
  // migrations:[
  //   {
  //     oldXmlTag: "grantId",
  //     toField: "fundingProjectId",
  //   },
}
